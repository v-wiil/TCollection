1.python decorator was realized with Recursive（装饰器是由替换递归思想实现）

def wrap_with_prints(fn):
    # This will only happen when a function decorated
    # with @wrap_with_prints is defined
    print('wrap_with_prints runs only once')
 
    def wrapped():
        # This will happen each time just before
        # the decorated function is called
        print('About to run %s' % fn.__name__)
        # Here is where the wrapper calls the decorated function
        fn()
        fn()
        # This will happen each time just after
        # the decorated function is called
        print('Done running %s' % fn.__name__)
 
    return wrapped
 
#@wrap_with_prints
#@wrap_with_prints
#@wrap_with_prints
def func_to_decorate():
    print('Running the function that was decorated.')
    
#func_to_decorate()

wrap_with_prints(wrap_with_prints(wrap_with_prints(func_to_decorate)))()

2.装饰器的一个重要作用：统一日志记录
example:
    def log_calls(fn):
    print('begin')
    def inner(*args, **kwargs):

        out = fn(*args, **kwargs)
        
        with open('logfile.log','a') as logfile:
            
            logfile.write('%s called with args %s and kwargs %s, returning %s\n'%(fn.__name__,  args, kwargs, out))

        return out
    
    return inner

@log_calls
def fizz_buzz_or_number(*args):
    return args

fizz_buzz_or_number(1,2,3)
